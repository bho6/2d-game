{\rtf1\ansi\ansicpg1252\cocoartf1344\cocoasubrtf720
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww14200\viewh11500\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\b\fs36 \cf0 Rust 3D Game Engine Design
\b0 \
\
\

\b\fs28 High Level Overview:
\b0 \

\fs24 This is an informal design document for a 3D game engine written in Rust. It will utilize an Entity Component System and an event driven model. The graphics will be hardware accelerated using OpenGL (and the corresponding gl-rs Rust bindings). The goal of this engine is to provide an easy and extensible interface for developing 3D games in Rust conducive to both rapid prototyping and full-fledged projects.\
\
\

\b\fs28 Entity Component System:
\b0 \

\fs24 The engine at its core will have three main abstractions: entities, components, and systems. An entity is a data representation of \'93something\'94 in the world; for example, a game might have an entity for an enemy, a player, a power-up, or a camera. Each entity is made up of a composition of various components that hold data pertaining to the component\'92s intended use. For example, a RenderComponent might include (x, y, z) coordinates in world space for use in rendering. No code, however, lives in the actual components. Instead, the behavior is abstracted into systems that operate on entities with specific sets of components. Continuing from the last example, a RenderSystem should contain a set of entities with RenderComponents and MeshComponents. At every frame update, the RenderSystem will iterate over its entities and render each one to the screen using the game engine\'92s built-in rendering functions.\
\
More concretely, each system operates on a \'93Family\'94 (inspired by libgdx\'92s Ashley framework) which is a group of all entities that have a certain set of included components and do not have any components from a different set of excluded components. By doing this, the programmer does not have to explicitly add entities to systems, eliminating a source of possible error. I am currently unsure of this design decision because it might result in unexpected side effects when defining new entities that might inadvertently be used in preexisting systems.\
\
\

\b\fs28 Event Driven Programming:\

\b0\fs24 There might be times when we want to couple multiple systems or exchange information between them explicitly. The engine offers a solution to this by allowing for inter-system communication via events and callback functions (similar to the observer pattern). The engine has an EventHandler to which systems can subscribe to events (represented as strings) with a callback function. Systems can also use the engine\'92s EventHandler to broadcast messages on a specific event with some data, and the EventHandler will then call each callback function waiting on the broadcasted event via dynamic dispatch.\
\
There are a few special events that are automatically created. First is the \'93UPDATE\'94 event itself. This is automatically subscribed to by every system that is attached to the engine. Instead of manually iterating over the update functions like in other frameworks, we simply just broadcast \'93UPDATE\'94 for the same purpose. Similarly, we also have the \'93INPUT\'94 event where key presses and key releases are first handled by the engine and then broadcast to the appropriate systems. Finally, we may have \'93REMOVE_COMPONENT\'94 or \'93REMOVE_ENTITY\'94 events, but I\'92m currently unsure if that\'92s a good idea.\
\
\

\b\fs28 Graphics Module:\

\b0\fs24 The engine will also provide an API for rendering 3D objects to the screen which abstracts away the OpenGL nastiness. The API has not been solidified yet, but it should allow for adding meshes to be drawn with particular materials/textures, a draw() function, and a clear() function. The API should also allow for adding different types of lights (which can be managed in a LightSystem). Finally, the API should also allow for some customization of the graphics pipeline by allowing the programmer to write shaders to be used in materials. More research into this field needs to be done still.\
\
\

\b\fs28 Sound Module:
\b0 \

\fs24 This will allow us to play sounds in a platform independent manner.\
\
\

\b\fs28 Physics Module:
\b0 \

\fs24 This will handle certain types of physics calculations.\
}